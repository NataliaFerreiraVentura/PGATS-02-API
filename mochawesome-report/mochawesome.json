{
  "stats": {
    "suites": 8,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-15T23:33:37.504Z",
    "end": "2025-09-15T23:33:37.996Z",
    "duration": 492,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c7f840df-4328-45d0-8281-0b00301a2f66",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d8bf2600-36e1-4cad-aca0-6ce8d36bc363",
          "title": "Transfer Controller",
          "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\transferController.test.js",
          "file": "\\test\\controller\\transferController.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Transfer Controller\"",
              "fullTitle": "Transfer Controller \"before all\" hook in \"Transfer Controller\"",
              "timedOut": false,
              "duration": 78,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Cria os usuários uma única vez\nawait registerUser('Naty', '123456', ['Nathan']);\nawait registerUser('Nathan', '123456', []);",
              "err": {},
              "uuid": "60c057be-6ceb-4545-8709-0289a1c2bb8b",
              "parentUUID": "d8bf2600-36e1-4cad-aca0-6ce8d36bc363",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Transfer Controller\"",
              "fullTitle": "Transfer Controller \"before each\" hook in \"Transfer Controller\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Faz login e cria helper de requisição autenticada\ntoken = await loginAndGetToken('Naty', '123456');\nauthed = authRequest(token);",
              "err": {},
              "uuid": "31c4ec01-6932-4424-8d37-9e8ba0cb033e",
              "parentUUID": "d8bf2600-36e1-4cad-aca0-6ce8d36bc363",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Transfer Controller\"",
              "fullTitle": "Transfer Controller \"after each\" hook in \"Transfer Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore()",
              "err": {},
              "uuid": "7ef8ad00-3142-46fc-8334-8711253cd291",
              "parentUUID": "d8bf2600-36e1-4cad-aca0-6ce8d36bc363",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "40852982-e3eb-4d3b-a55a-8ec9808286cd",
              "title": "POST /transfer",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\transferController.test.js",
              "file": "\\test\\controller\\transferController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 400 quando saldo é insuficiente",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 400 quando saldo é insuficiente",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userModel = require('../../models/userModel');\nconst naty = userModel.users.find(u => u.username === 'Naty');\nif (naty) naty.balance = 0; // mocka saldo insuficiente\n// Recarga mínima\nawait authed('post', '/users/recharge').send({ username: 'Naty', amount: 10 });\nconst res = await authed('post', '/transfer')\n  .send({ from: 'Naty', to: 'Nathan', amount: 100 });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Saldo insuficiente');",
                  "err": {},
                  "uuid": "6095ed71-896b-46a8-a727-682531552de0",
                  "parentUUID": "40852982-e3eb-4d3b-a55a-8ec9808286cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 500 quando ocorre erro na transferência",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 500 quando ocorre erro na transferência",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Simula erro no serviço\nsinon.stub(transferService, 'transferValue')\n  .throws(new Error('Erro simulado na transferência'));\nconst res = await authed('post', '/transfer')\n  .send({ from: 'Naty', to: 'Nathan', amount: 100 });\nexpect(res.status).to.equal(500);\nexpect(res.body).to.have.property('error', 'Erro simulado na transferência');",
                  "err": {},
                  "uuid": "7ffc4be7-a2de-4e50-b775-038f7d212686",
                  "parentUUID": "40852982-e3eb-4d3b-a55a-8ec9808286cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 400 quando usuário remetente ou destinatário não existe",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 400 quando usuário remetente ou destinatário não existe",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await authed('post', '/transfer')\n  .send({ from: 'INEXISTENTE', to: 'QA', amount: 100 });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado');\nconsole.log('Resposta do corpo:', res.body);",
                  "err": {},
                  "uuid": "664a2689-ac71-4448-9a4d-3208e15ffb0a",
                  "parentUUID": "40852982-e3eb-4d3b-a55a-8ec9808286cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 400 usando mock quando remetente não existe",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 400 usando mock quando remetente não existe",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const err = new Error('Usuário remetente ou destinatário não encontrado');\nerr.status = 400;\nsinon.stub(transferService, 'transferValue').throws(err);\nconst res = await authed('post', '/transfer')\n  .send({ from: 'QA', to: 'JULIO', amount: 100 });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado');",
                  "err": {},
                  "uuid": "174ce2a9-0f67-4c43-b4fe-f868c07e6eb8",
                  "parentUUID": "40852982-e3eb-4d3b-a55a-8ec9808286cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 201 usando mock quando a transferência é válida",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 201 usando mock quando a transferência é válida",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaEsperada = require('../fixture/Respostas/transferFixtureComSucesso.json').transferList[0];\n// Mocka transferência bem-sucedida\nconst mockData = {\n  from: 'Naty',\n  to: 'Nathan',\n  amount: 100,\n  date: new Date().toISOString()\n};\nsinon.stub(transferService, 'transferValue').returns(mockData);\nconst res = await authed('post', '/transfer')\n  .send({ from: 'Naty', to: 'Nathan', amount: 100 });\nexpect(res.status).to.equal(201);\n// Remove data para comparação exata\ndelete res.body.date;\nconst respostaSemData = { ...respostaEsperada };\ndelete respostaSemData.date;\nexpect(res.body).to.deep.equal(respostaSemData);\nexpect(res.status).to.equal(201);\nconsole.log('Resposta do corpo:', res.body);",
                  "err": {},
                  "uuid": "6138e2ca-354d-4dce-8d22-53fdbee7649a",
                  "parentUUID": "40852982-e3eb-4d3b-a55a-8ec9808286cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6095ed71-896b-46a8-a727-682531552de0",
                "7ffc4be7-a2de-4e50-b775-038f7d212686",
                "664a2689-ac71-4448-9a4d-3208e15ffb0a",
                "174ce2a9-0f67-4c43-b4fe-f868c07e6eb8",
                "6138e2ca-354d-4dce-8d22-53fdbee7649a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 83,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "42f90f40-3056-4fcd-9737-2777f89c13b2",
              "title": "GET /transfer",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\transferController.test.js",
              "file": "\\test\\controller\\transferController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 200 e uma lista de transferências",
                  "fullTitle": "Transfer Controller GET /transfer Deve retornar 200 e uma lista de transferências",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await authed('get', '/transfer');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
                  "err": {},
                  "uuid": "a463546e-30d4-48b0-8040-32e22aa1f065",
                  "parentUUID": "42f90f40-3056-4fcd-9737-2777f89c13b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a463546e-30d4-48b0-8040-32e22aa1f065"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ad34c677-4811-410f-baa5-2ac140df0316",
          "title": "User Controller",
          "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\userController.test.js",
          "file": "\\test\\controller\\userController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2e71f975-9dd1-44d1-a9d1-d6eae4b499aa",
              "title": "GET /users",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\userController.test.js",
              "file": "\\test\\controller\\userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando pesquiso usuários, recebo uma lista",
                  "fullTitle": "User Controller GET /users Quando pesquiso usuários, recebo uma lista",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n  .get('/users');\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.be.an('array');",
                  "err": {},
                  "uuid": "86ab11bd-742b-4626-a16b-7ac72dc1c734",
                  "parentUUID": "2e71f975-9dd1-44d1-a9d1-d6eae4b499aa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86ab11bd-742b-4626-a16b-7ac72dc1c734"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "98a8822f-cfc0-4533-a32e-19022308b554",
              "title": "POST /users/login",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\userController.test.js",
              "file": "\\test\\controller\\userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "MOCK: Quando faço login com credenciais invalidas , recebo 401",
                  "fullTitle": "User Controller POST /users/login MOCK: Quando faço login com credenciais invalidas , recebo 401",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mockar apenas a função transfer do service\nconst userServiceMock = sinon.stub(userService, 'loginUser');\nuserServiceMock.throws(new Error('Credenciais inválidas'));\nconst resposta = await request(app)\n  .post('/users/login')\n  .send({\n    username: \"QA\",\n    password: \"12345\"\n  });\nexpect(resposta.status).to.equal(401);\nexpect(resposta.body).to.have.property('error', 'Credenciais inválidas');\nsinon.restore();",
                  "err": {},
                  "uuid": "495d056a-8265-4744-acc9-a1b47e77e8dc",
                  "parentUUID": "98a8822f-cfc0-4533-a32e-19022308b554",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando faço login com credenciais invalidas , recebo 401",
                  "fullTitle": "User Controller POST /users/login Quando faço login com credenciais invalidas , recebo 401",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n  .post('/users/login')\n  .send({\n    username: \"QA\",\n    password: \"12345\"\n  });\nexpect(resposta.status).to.equal(401);\nexpect(resposta.body).to.have.property('error', 'Credenciais inválidas');",
                  "err": {},
                  "uuid": "7ddc4222-fc66-46c4-84f6-7eeb7c5ce010",
                  "parentUUID": "98a8822f-cfc0-4533-a32e-19022308b554",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "495d056a-8265-4744-acc9-a1b47e77e8dc",
                "7ddc4222-fc66-46c4-84f6-7eeb7c5ce010"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7d1764d8-152a-45d7-9084-01de5c3e6096",
          "title": "Transfer Controller - external",
          "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\external\\transferExternal.test.js",
          "file": "\\test\\external\\transferExternal.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Transfer Controller - external\"",
              "fullTitle": "Transfer Controller - external \"before all\" hook in \"Transfer Controller - external\"",
              "timedOut": false,
              "duration": 130,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await registerUserExternal('Naty', '123456', []);\ntoken = await loginAndGetTokenExternal('Naty', '123456');\nauthed = authRequestExternal(token);\nawait authed('post', '/users/recharge')\n    .send({ username: 'Naty', amount: 1000 });\nexpect(token).to.be.a('string');\nexpect(token).to.not.be.empty;\nconsole.log('Token obtido no login:', token);",
              "err": {},
              "uuid": "bf3e17f4-76cc-4ce3-8906-779a1b449c8f",
              "parentUUID": "7d1764d8-152a-45d7-9084-01de5c3e6096",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve retornar 400 se destinatário não estiver cadastrado",
              "fullTitle": "Transfer Controller - external Deve retornar 400 se destinatário não estiver cadastrado",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Não cadastra o destinatário\nconst userData = {\n    from: 'Naty',\n    to: 'QAS',\n    amount: 100\n};\nconst res = await authed('post', '/transfer').send(userData);\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado');",
              "err": {},
              "uuid": "4a952069-80f3-437e-850a-e585a1cb35fe",
              "parentUUID": "7d1764d8-152a-45d7-9084-01de5c3e6096",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar 201 quando a transferência é válida",
              "fullTitle": "Transfer Controller - external Deve retornar 201 quando a transferência é válida",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await registerUserExternal('Nathan', '123456', []);\n    \nconst userData = {\n    from: 'Naty',\n    to: 'Nathan',\n    amount: 100\n};\nconst res = await authed('post', '/transfer').send(userData);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('from', 'Naty');\nexpect(res.body).to.have.property('to', 'Nathan');\nexpect(res.body).to.have.property('amount', 100);\nexpect(res.body).to.have.property('date');\nconsole.log('Resposta do corpo:', res.body);",
              "err": {},
              "uuid": "e95af45a-2e2a-4613-bf37-aca2566bb460",
              "parentUUID": "7d1764d8-152a-45d7-9084-01de5c3e6096",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar 200 ao consultar transferências",
              "fullTitle": "Transfer Controller - external Deve retornar 200 ao consultar transferências",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await authed('get', '/transfer');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
              "err": {},
              "uuid": "d345aa8f-417b-4802-addb-dd4a81c18344",
              "parentUUID": "7d1764d8-152a-45d7-9084-01de5c3e6096",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Devo receber 200 e o valor do saldo ao consultar meu saldo",
              "fullTitle": "Transfer Controller - external Devo receber 200 e o valor do saldo ao consultar meu saldo",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await authed('get', '/users/balance');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('username', 'Naty');\nexpect(res.body).to.have.property('balance');\nexpect(res.body.balance).to.be.a('number');\nexpect(res.body.balance).to.be.at.least(0);\nconsole.log(res.body.balance);",
              "err": {},
              "uuid": "74da3c79-16b2-40e9-942d-446e655ee268",
              "parentUUID": "7d1764d8-152a-45d7-9084-01de5c3e6096",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4a952069-80f3-437e-850a-e585a1cb35fe",
            "e95af45a-2e2a-4613-bf37-aca2566bb460",
            "d345aa8f-417b-4802-addb-dd4a81c18344",
            "74da3c79-16b2-40e9-942d-446e655ee268"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 47,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "34441696-2fa4-46d0-a954-ffaddce6c02b",
          "title": "Transfer Controller - external - outro exemplo mostrado em aula",
          "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\external\\transferExternal.test.js",
          "file": "\\test\\external\\transferExternal.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve retornar 201 quando a transferência é válida",
              "fullTitle": "Transfer Controller - external - outro exemplo mostrado em aula Deve retornar 201 quando a transferência é válida",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//1- criar usuario\nconst resgritroUser = await request('http://localhost:3000')\n    .post('/users/register')\n    .send({\n        \"username\": \"QA\",\n        \"password\": \"123456\",\n        \"favorecidos\": [\n            \"\"\n        ]\n    });\n//2- capturar o token\nconst respostaLogin = await request('http://localhost:3000')\n    .post('/users/login')\n    .send({\n        username: 'QA',\n        password: '123456'\n    });\nconst token = respostaLogin.body.user.token;\n// 3 - realizar transferencia\nconst userData = {\n    from: 'Naty',\n    to: 'Nathan',\n    amount: 100\n};\nconst resposta = await request('http://localhost:3000')\n    .post('/transfer')\n    .set('Authorization', `Bearer ${token}`) // Adiciona o token no cabeçalho\n    .send(userData);\nexpect(resposta.status).to.equal(201);\nexpect(resposta.body).to.have.property('from', 'Naty');\nexpect(resposta.body).to.have.property('to', 'Nathan');\nexpect(resposta.body).to.have.property('amount', 100);\nexpect(resposta.body).to.have.property('date');\nconsole.log('Resposta do corpo:', resposta.body);",
              "err": {},
              "uuid": "8afac25b-0981-4f63-95e4-12720e6c833c",
              "parentUUID": "34441696-2fa4-46d0-a954-ffaddce6c02b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8afac25b-0981-4f63-95e4-12720e6c833c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}