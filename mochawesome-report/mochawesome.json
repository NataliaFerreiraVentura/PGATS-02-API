{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-20T03:57:35.493Z",
    "end": "2025-09-20T03:57:35.873Z",
    "duration": 380,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8bd66d99-b8de-44e2-9531-5b688e2af50f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1c739083-c0fd-4279-8d92-0c48bab3aff0",
          "title": "Transfer - external",
          "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\external\\transferExternal.test.js",
          "file": "\\test\\external\\transferExternal.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Transfer - external\"",
              "fullTitle": "Transfer - external \"before each\" hook in \"Transfer - external\"",
              "timedOut": false,
              "duration": 36,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "token = await loginAndGetTokenExternal('Naty', '123456');\nauthed = authRequestExternal(token);\n// Resetar saldo do remetente\nawait authed('post', '/users/recharge')\n    .send({ username: 'Naty', amount: 1000 });\n// Garantir que destinatário existe para testes positivos\nawait registerUserExternal('Nathan', '123456');\nexpect(token).to.be.a('string');\nexpect(token).to.not.be.empty;",
              "err": {},
              "uuid": "8dfe6472-9d9d-4227-bdc8-7b35147808d1",
              "parentUUID": "1c739083-c0fd-4279-8d92-0c48bab3aff0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Transfer - external\"",
              "fullTitle": "Transfer - external \"after each\" hook in \"Transfer - external\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Aqui você pode implementar lógica para remover usuários criados, se necessário\n// await deleteUserExternal('Nathan');",
              "err": {},
              "uuid": "d240f487-4b7f-41d4-ad77-85b672de03bc",
              "parentUUID": "1c739083-c0fd-4279-8d92-0c48bab3aff0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Deve retornar 400 se destinatário não estiver cadastrado",
              "fullTitle": "Transfer - external Deve retornar 400 se destinatário não estiver cadastrado",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Melhoria: valida mensagem de erro e status\n// Não cadastra o destinatário 'QAS'\nconst userData = {\n    from: 'Naty',\n    to: 'QAS',\n    amount: 100\n};\nconst res = await authed('post', '/transfer').send(userData);\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado');\n// Melhoria: checar tipo da resposta\nexpect(res.body.error).to.be.a('string');",
              "err": {},
              "uuid": "ff4918c0-ba7a-45d6-b556-c9017aa984ca",
              "parentUUID": "1c739083-c0fd-4279-8d92-0c48bab3aff0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar 201 quando a transferência é válida",
              "fullTitle": "Transfer - external Deve retornar 201 quando a transferência é válida",
              "timedOut": false,
              "duration": 78,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Melhoria: consulta saldo antes e depois\n// Consulta saldo inicial do remetente e destinatário\nconst saldoRemetenteAntes = (await authed('get', '/users/balance')).body.saldo;\nconst saldoDestinatarioAntes = (await request('http://localhost:3000')\n    .post('/users/login')\n    .send({ username: 'Nathan', password: '123456' })\n    .then(res => res.body.user.token)\n    .then(tokenNathan => request('http://localhost:3000')\n        .get('/users/balance')\n        .set('Authorization', `Bearer ${tokenNathan}`)\n    )).body.saldo;\nconst userData = {\n    from: 'Naty',\n    to: 'Nathan',\n    amount: 100\n};\nconst res = await authed('post', '/transfer').send(userData);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('from', 'Naty');\nexpect(res.body).to.have.property('to', 'Nathan');\nexpect(res.body).to.have.property('amount', 100);\nexpect(res.body).to.have.property('date');\n// Melhoria: checar tipos\nexpect(res.body.amount).to.be.a('number');\nexpect(res.body.date).to.be.a('string');\n// Consulta saldo após transferência\nconst saldoRemetenteDepois = (await authed('get', '/users/balance')).body.saldo;\nconst saldoDestinatarioDepois = (await request('http://localhost:3000')\n    .post('/users/login')\n    .send({ username: 'Nathan', password: '123456' })\n    .then(res => res.body.user.token)\n    .then(tokenNathan => request('http://localhost:3000')\n        .get('/users/balance')\n        .set('Authorization', `Bearer ${tokenNathan}`)\n    )).body.saldo;\n// Melhoria: valida saldo atualizado\nexpect(saldoRemetenteDepois).to.equal(saldoRemetenteAntes - userData.amount);\nexpect(saldoDestinatarioDepois).to.equal(saldoDestinatarioAntes + userData.amount);",
              "err": {},
              "uuid": "23e91b32-65fb-409c-b426-730aca1b785f",
              "parentUUID": "1c739083-c0fd-4279-8d92-0c48bab3aff0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar 200 ao consultar transferências",
              "fullTitle": "Transfer - external Deve retornar 200 ao consultar transferências",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Melhoria: checar estrutura dos itens do array\nconst res = await authed('get', '/transfer');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nif (res.body.length > 0) {\n    const item = res.body[0];\n    expect(item).to.have.property('from');\n    expect(item).to.have.property('to');\n    expect(item).to.have.property('amount');\n    expect(item).to.have.property('date');\n}",
              "err": {},
              "uuid": "3273b935-28a0-4cec-931f-48058e5abdd7",
              "parentUUID": "1c739083-c0fd-4279-8d92-0c48bab3aff0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar 400 ao tentar transferir valor zero",
              "fullTitle": "Transfer - external Deve retornar 400 ao tentar transferir valor zero",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userData = {\n    from: 'Naty',\n    to: 'Nathan',\n    amount: 0\n};\nconst res = await authed('post', '/transfer').send(userData);\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "49c4ade9-f9e4-4778-94c6-fcddfb1c0156",
              "parentUUID": "1c739083-c0fd-4279-8d92-0c48bab3aff0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar 400 ao tentar transferir valor negativo",
              "fullTitle": "Transfer - external Deve retornar 400 ao tentar transferir valor negativo",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userData = {\n    from: 'Naty',\n    to: 'Nathan',\n    amount: -50\n};\nconst res = await authed('post', '/transfer').send(userData);\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "3cf61212-1983-4dd2-bfbc-150f3d17a8a2",
              "parentUUID": "1c739083-c0fd-4279-8d92-0c48bab3aff0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ff4918c0-ba7a-45d6-b556-c9017aa984ca",
            "23e91b32-65fb-409c-b426-730aca1b785f",
            "3273b935-28a0-4cec-931f-48058e5abdd7",
            "49c4ade9-f9e4-4778-94c6-fcddfb1c0156",
            "3cf61212-1983-4dd2-bfbc-150f3d17a8a2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 103,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "97e51ace-7e0d-46cc-bc15-fa446e7037fb",
          "title": "Transfer - external - outro exemplo mostrado em aula",
          "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\external\\transferExternal.test.js",
          "file": "\\test\\external\\transferExternal.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Transfer - external - outro exemplo mostrado em aula\"",
              "fullTitle": "Transfer - external - outro exemplo mostrado em aula \"before all\" hook in \"Transfer - external - outro exemplo mostrado em aula\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const respostaLogin = await request('http://localhost:3000')\n    .post('/users/login')\n    .send({ username: 'Naty', password: '123456' });\nthis.token = respostaLogin.body.user.token;",
              "err": {},
              "uuid": "54d89237-c0b6-4bb7-95cc-4fa56b58308a",
              "parentUUID": "97e51ace-7e0d-46cc-bc15-fa446e7037fb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve retornar 201 quando a transferência é válida",
              "fullTitle": "Transfer - external - outro exemplo mostrado em aula Deve retornar 201 quando a transferência é válida",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Melhoria: garantir que destinatário existe\nawait request('http://localhost:3000')\n    .post('/users/register')\n    .send({ username: 'sophia', password: '123456' });\nconst userData = {\n    from: 'Naty',\n    to: 'sophia',\n    amount: 1\n};\nconst resposta = await request('http://localhost:3000')\n    .post('/transfer')\n    .set('Authorization', `Bearer ${this.token}`)\n    .send(userData);\nexpect(resposta.status).to.equal(201);\nexpect(resposta.body).to.have.property('from', 'Naty');\nexpect(resposta.body).to.have.property('to', 'sophia');\nexpect(resposta.body).to.have.property('date');\n// Melhoria: checar tipos\nexpect(resposta.body.amount).to.be.a('number');\nexpect(resposta.body.date).to.be.a('string');",
              "err": {},
              "uuid": "a4bfe75a-7575-4e58-b212-fc1bb2ede6a7",
              "parentUUID": "97e51ace-7e0d-46cc-bc15-fa446e7037fb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a4bfe75a-7575-4e58-b212-fc1bb2ede6a7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}