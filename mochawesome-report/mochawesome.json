{
  "stats": {
    "suites": 8,
    "tests": 17,
    "passes": 17,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-20T03:48:30.447Z",
    "end": "2025-09-20T03:48:31.156Z",
    "duration": 709,
    "testsRegistered": 17,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "86af6d1e-e63b-4bcd-a7b4-5ff357fcbdfa",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "222ba0a3-2937-408e-b368-bd5d90bd73a4",
          "title": "Transfer Controller",
          "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\transferController.test.js",
          "file": "\\test\\controller\\transferController.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Transfer Controller\"",
              "fullTitle": "Transfer Controller \"before each\" hook in \"Transfer Controller\"",
              "timedOut": false,
              "duration": 28,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Faz login e cria helper de requisição autenticada\ntoken = await loginAndGetToken('Naty', '123456');\nauthed = authRequest(token);",
              "err": {},
              "uuid": "7ab66ebe-af04-46c4-89ac-906a677e93b7",
              "parentUUID": "222ba0a3-2937-408e-b368-bd5d90bd73a4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Transfer Controller\"",
              "fullTitle": "Transfer Controller \"after each\" hook in \"Transfer Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore()",
              "err": {},
              "uuid": "41b2d812-9149-4b1f-9f3e-e255d8d57292",
              "parentUUID": "222ba0a3-2937-408e-b368-bd5d90bd73a4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "671928ba-0042-484d-9e0b-d62c6fc6d211",
              "title": "POST /transfer",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\transferController.test.js",
              "file": "\\test\\controller\\transferController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 400 quando saldo é insuficiente",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 400 quando saldo é insuficiente",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userModel = require('../../models/userModel');\nconst naty = userModel.users.find(u => u.username === 'Naty');\nif (naty) naty.saldo = 0; // mocka saldo insuficiente\n// Recarga mínima\nawait authed('post', '/users/recharge').send({ username: 'Naty', amount: 10 });\nconst res = await authed('post', '/transfer')\n  .send({ from: 'Naty', to: 'Nathan', amount: 100 });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Saldo insuficiente');",
                  "err": {},
                  "uuid": "d2cd08f6-1543-4acf-a308-8f8b7e7e692d",
                  "parentUUID": "671928ba-0042-484d-9e0b-d62c6fc6d211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 500 quando ocorre erro na transferência",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 500 quando ocorre erro na transferência",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Simula erro no serviço\nsinon.stub(transferService, 'transferValue')\n  .throws(new Error('Erro simulado na transferência'));\nconst res = await authed('post', '/transfer')\n  .send({ from: 'Naty', to: 'Nathan', amount: 100 });\nexpect(res.status).to.equal(500);\nexpect(res.body).to.have.property('error', 'Erro simulado na transferência');",
                  "err": {},
                  "uuid": "f0566795-75fd-4536-adc8-005069b47ae4",
                  "parentUUID": "671928ba-0042-484d-9e0b-d62c6fc6d211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 403 quando usuário autenticado não bate com remetente",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 403 quando usuário autenticado não bate com remetente",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await authed('post', '/transfer')\n  .send({ from: 'INEXISTENTE', to: 'QA', amount: 100 });\nexpect(res.status).to.equal(403);\nexpect(res.body).to.have.property('error', 'Usuário autenticado não corresponde ao remetente da transferência');",
                  "err": {},
                  "uuid": "a61039d6-b3e7-413e-9cd5-b7cb1a3b583d",
                  "parentUUID": "671928ba-0042-484d-9e0b-d62c6fc6d211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 403 usando mock quando remetente não bate com autenticado",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 403 usando mock quando remetente não bate com autenticado",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const err = new Error('Usuário autenticado não corresponde ao remetente da transferência');\nerr.status = 403;\nsinon.stub(transferService, 'transferValue').throws(err);\nconst res = await authed('post', '/transfer')\n  .send({ from: 'QA', to: 'JULIO', amount: 100 });\nexpect(res.status).to.equal(403);\nexpect(res.body).to.have.property('error', 'Usuário autenticado não corresponde ao remetente da transferência');",
                  "err": {},
                  "uuid": "51b6ee19-c521-4a34-abea-f070206266cf",
                  "parentUUID": "671928ba-0042-484d-9e0b-d62c6fc6d211",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 201 usando mock quando a transferência é válida",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 201 usando mock quando a transferência é válida",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaEsperada = require('../fixture/Respostas/transferFixtureComSucesso.json').transferList[0];\n// Mocka transferência bem-sucedida\nconst mockData = {\n  from: 'Naty',\n  to: 'Nathan',\n  amount: 100,\n  date: new Date().toISOString()\n};\nsinon.stub(transferService, 'transferValue').returns(mockData);\nconst res = await authed('post', '/transfer')\n  .send({ from: 'Naty', to: 'Nathan', amount: 100 });\nexpect(res.status).to.equal(201);\n// Remove data para comparação exata\ndelete res.body.date;\nconst respostaSemData = { ...respostaEsperada };\ndelete respostaSemData.date;\nexpect(res.body).to.deep.equal(respostaSemData);\nexpect(res.status).to.equal(201);",
                  "err": {},
                  "uuid": "ef528d07-9e34-435b-ae55-11e52092e3ec",
                  "parentUUID": "671928ba-0042-484d-9e0b-d62c6fc6d211",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d2cd08f6-1543-4acf-a308-8f8b7e7e692d",
                "f0566795-75fd-4536-adc8-005069b47ae4",
                "a61039d6-b3e7-413e-9cd5-b7cb1a3b583d",
                "51b6ee19-c521-4a34-abea-f070206266cf",
                "ef528d07-9e34-435b-ae55-11e52092e3ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 63,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "c1948abf-3808-44f8-b56d-563cb77e36f8",
              "title": "GET /transfer",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\transferController.test.js",
              "file": "\\test\\controller\\transferController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 200 e lista de transferências",
                  "fullTitle": "Transfer Controller GET /transfer Deve retornar 200 e lista de transferências",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await authed('get', '/transfer');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
                  "err": {},
                  "uuid": "fbeee29f-42ab-4423-a765-ce4cd3022805",
                  "parentUUID": "c1948abf-3808-44f8-b56d-563cb77e36f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbeee29f-42ab-4423-a765-ce4cd3022805"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "ec30cbd0-7a8e-498e-927a-2bc0cccbcd4c",
              "title": "Transfer Controller -  exemplo mostrado em aula",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\transferController.test.js",
              "file": "\\test\\controller\\transferController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 400 quando saldo é insuficiente",
                  "fullTitle": "Transfer Controller Transfer Controller -  exemplo mostrado em aula Deve retornar 400 quando saldo é insuficiente",
                  "timedOut": false,
                  "duration": 63,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request(app)\n  .post('/users/login')\n  .send({\n    username: 'Nathan',\n    password: '123456'\n  });\nconst token = respostaLogin.body.user.token;\nconst res = await request(app)\n  .post('/transfer')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ from: 'Nathan', to: 'Naty', amount: 100 });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Saldo insuficiente');",
                  "err": {},
                  "uuid": "8a7f31d3-53ea-4419-9e47-493a967c93a5",
                  "parentUUID": "ec30cbd0-7a8e-498e-927a-2bc0cccbcd4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 200 e lista de transferências",
                  "fullTitle": "Transfer Controller Transfer Controller -  exemplo mostrado em aula Deve retornar 200 e lista de transferências",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .get('/transfer')\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
                  "err": {},
                  "uuid": "15b9a11f-3588-4811-9efd-50c4cb06d7d5",
                  "parentUUID": "ec30cbd0-7a8e-498e-927a-2bc0cccbcd4c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a7f31d3-53ea-4419-9e47-493a967c93a5",
                "15b9a11f-3588-4811-9efd-50c4cb06d7d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 70,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "bdc4a23c-f198-4343-a163-634eef2bdd8f",
          "title": "User Controller",
          "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\userController.test.js",
          "file": "\\test\\controller\\userController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2cf85675-02c2-4543-82e1-01dec7db1912",
              "title": "GET /users",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\userController.test.js",
              "file": "\\test\\controller\\userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando pesquiso usuários, recebo uma lista",
                  "fullTitle": "User Controller GET /users Quando pesquiso usuários, recebo uma lista",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n  .get('/users');\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.be.an('array');",
                  "err": {},
                  "uuid": "d335eb22-bfff-4a53-8889-322fc44f3f3d",
                  "parentUUID": "2cf85675-02c2-4543-82e1-01dec7db1912",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d335eb22-bfff-4a53-8889-322fc44f3f3d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "e65ab385-0d04-4977-92a0-f1c7f33e8da7",
              "title": "POST /users/login",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\userController.test.js",
              "file": "\\test\\controller\\userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "MOCK: Quando faço login com credenciais invalidas , recebo 401",
                  "fullTitle": "User Controller POST /users/login MOCK: Quando faço login com credenciais invalidas , recebo 401",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mockar apenas a função transfer do service\nconst userServiceMock = sinon.stub(userService, 'loginUser');\nuserServiceMock.throws(new Error('Credenciais inválidas'));\nconst resposta = await request(app)\n  .post('/users/login')\n  .send({\n    username: \"QA\",\n    password: \"12345\"\n  });\nexpect(resposta.status).to.equal(401);\nexpect(resposta.body).to.have.property('error', 'Credenciais inválidas');\nsinon.restore();",
                  "err": {},
                  "uuid": "d329399f-77b7-48d4-ad06-4ee8a226a7cd",
                  "parentUUID": "e65ab385-0d04-4977-92a0-f1c7f33e8da7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando faço login com credenciais invalidas , recebo 401",
                  "fullTitle": "User Controller POST /users/login Quando faço login com credenciais invalidas , recebo 401",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n  .post('/users/login')\n  .send({\n    username: \"QA\",\n    password: \"12345\"\n  });\nexpect(resposta.status).to.equal(401);\nexpect(resposta.body).to.have.property('error', 'Credenciais inválidas');",
                  "err": {},
                  "uuid": "e3b47c4c-2c95-4e7e-b74f-320845458074",
                  "parentUUID": "e65ab385-0d04-4977-92a0-f1c7f33e8da7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando faço login com credenciais válidas , recebo 200 e token",
                  "fullTitle": "User Controller POST /users/login Quando faço login com credenciais válidas , recebo 200 e token",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n  .post('/users/login')\n  .send({\n    \"username\": \"Naty\",\n    \"password\": \"123456\"\n  });\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.have.property('user')\nexpect(resposta.body.user).to.have.property('token')\nexpect(resposta.body.user).to.have.property('saldo')\nexpect(resposta.body.user).to.have.property('favorecidos')",
                  "err": {},
                  "uuid": "4459645f-de06-4da4-94c3-79d3094928e1",
                  "parentUUID": "e65ab385-0d04-4977-92a0-f1c7f33e8da7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve permitir registrar username já existente via REST",
                  "fullTitle": "User Controller POST /users/login Não deve permitir registrar username já existente via REST",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n .post('/users/register')\n .send({ username: 'Naty', password: '123456' });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error');",
                  "err": {},
                  "uuid": "4e0cfbdf-d67f-4a33-b934-867ae89af018",
                  "parentUUID": "e65ab385-0d04-4977-92a0-f1c7f33e8da7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d329399f-77b7-48d4-ad06-4ee8a226a7cd",
                "e3b47c4c-2c95-4e7e-b74f-320845458074",
                "4459645f-de06-4da4-94c3-79d3094928e1",
                "4e0cfbdf-d67f-4a33-b934-867ae89af018"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 48,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "6455f0c4-c5a9-4f0b-b93f-c57f3cf0484e",
              "title": "GET /users/balance",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\userController.test.js",
              "file": "\\test\\controller\\userController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"GET /users/balance\"",
                  "fullTitle": "User Controller GET /users/balance \"before each\" hook in \"GET /users/balance\"",
                  "timedOut": false,
                  "duration": 34,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request(app)\n  .post('/users/login')\n  .send({\n    \"username\": \"Naty\",\n    \"password\": \"123456\"\n  });\ntoken = respostaLogin.body.user.token;",
                  "err": {},
                  "uuid": "7b690aa1-50f6-4e23-b878-7c2de8ed340c",
                  "parentUUID": "6455f0c4-c5a9-4f0b-b93f-c57f3cf0484e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devo receber 200 e o valor do meu saldo",
                  "fullTitle": "User Controller GET /users/balance Devo receber 200 e o valor do meu saldo",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n        .get('/users/balance')\n        .set('Authorization', `Bearer ${token}`);\n      expect(res.status).to.equal(200);\n      expect(res.body).to.have.property('saldo');\n      expect(res.body.saldo).to.be.a('number');\n      expect(res.body.saldo).to.be.at.least(0);",
                  "err": {},
                  "uuid": "4d0d3a93-f6a9-4e93-9908-a71c48fb25d3",
                  "parentUUID": "6455f0c4-c5a9-4f0b-b93f-c57f3cf0484e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devo receber 200 e o valor do saldo ao consultar meu saldo",
                  "fullTitle": "User Controller GET /users/balance Devo receber 200 e o valor do saldo ao consultar meu saldo",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .get('/users/balance')\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('username', 'Naty');\nexpect(res.body).to.have.property('saldo');\nexpect(res.body.saldo).to.be.a('number');\nexpect(res.body.saldo).to.be.at.least(0);",
                  "err": {},
                  "uuid": "503aa289-f229-4707-87fd-b35c08769804",
                  "parentUUID": "6455f0c4-c5a9-4f0b-b93f-c57f3cf0484e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devo receber 200 ao recarregar meu saldo",
                  "fullTitle": "User Controller GET /users/balance Devo receber 200 ao recarregar meu saldo",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/users/recharge')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    \"username\": \"Naty\",\n    \"amount\": 100\n  });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('username', 'Naty');\nexpect(res.body).to.have.property('saldo');",
                  "err": {},
                  "uuid": "d8b4632e-b490-44d3-825e-f3b2cb3289d0",
                  "parentUUID": "6455f0c4-c5a9-4f0b-b93f-c57f3cf0484e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devo receber 200 ao recarregar meu saldo e o saldo deve ser alterado",
                  "fullTitle": "User Controller GET /users/balance Devo receber 200 ao recarregar meu saldo e o saldo deve ser alterado",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Consulta saldo inicial\nconst consultaInicial = await request(app)\n  .get('/users/balance')\n  .set('Authorization', `Bearer ${token}`);\nconst saldoInicial = consultaInicial.body.saldo;\nconsole.log(`Saldo inicial: ${saldoInicial}`);\n// Realiza recarga\nconst valorRecarga = 100;\nconst res = await request(app)\n  .post('/users/recharge')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    \"username\": \"Naty\",\n    \"amount\": valorRecarga\n  });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('saldo');\nexpect(res.body).to.have.property('username', 'Naty');\n// Consulta saldo após recarga\nconst respostaConsulta = await request(app)\n  .get('/users/balance')\n  .set('Authorization', `Bearer ${token}`);\nconsole.log(`Saldo após recarga: ${respostaConsulta.body.saldo}`);\nexpect(respostaConsulta.status).to.equal(200);\nexpect(respostaConsulta.body).to.have.property('saldo');\nexpect(respostaConsulta.body.saldo).to.equal(saldoInicial + valorRecarga);",
                  "err": {},
                  "uuid": "6d2bb5d3-6c4d-4d8f-9538-ab9ac8a0a544",
                  "parentUUID": "6455f0c4-c5a9-4f0b-b93f-c57f3cf0484e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d0d3a93-f6a9-4e93-9908-a71c48fb25d3",
                "503aa289-f229-4707-87fd-b35c08769804",
                "d8b4632e-b490-44d3-825e-f3b2cb3289d0",
                "6d2bb5d3-6c4d-4d8f-9538-ab9ac8a0a544"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 36,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}