{
  "stats": {
    "suites": 8,
    "tests": 17,
    "passes": 17,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-20T02:36:45.567Z",
    "end": "2025-09-20T02:36:46.250Z",
    "duration": 683,
    "testsRegistered": 17,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0c9fd6d3-be13-47d3-8de3-fc5ff5c572b7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cbb10e1b-c856-43b0-b6ff-2950dca198e7",
          "title": "Transfer Controller",
          "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\transferController.test.js",
          "file": "\\test\\controller\\transferController.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Transfer Controller\"",
              "fullTitle": "Transfer Controller \"before each\" hook in \"Transfer Controller\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Faz login e cria helper de requisição autenticada\ntoken = await loginAndGetToken('Naty', '123456');\nauthed = authRequest(token);",
              "err": {},
              "uuid": "94594e8e-c939-4b62-829e-ca89b5cff82f",
              "parentUUID": "cbb10e1b-c856-43b0-b6ff-2950dca198e7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Transfer Controller\"",
              "fullTitle": "Transfer Controller \"after each\" hook in \"Transfer Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore()",
              "err": {},
              "uuid": "702dfad9-422f-4ed4-a5f0-45a1b6ec2ac7",
              "parentUUID": "cbb10e1b-c856-43b0-b6ff-2950dca198e7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "77e6e4b8-278c-4242-82fc-d9979d6c85bb",
              "title": "POST /transfer",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\transferController.test.js",
              "file": "\\test\\controller\\transferController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 400 quando saldo é insuficiente",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 400 quando saldo é insuficiente",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userModel = require('../../models/userModel');\nconst naty = userModel.users.find(u => u.username === 'Naty');\nif (naty) naty.saldo = 0; // mocka saldo insuficiente\n// Recarga mínima\nawait authed('post', '/users/recharge').send({ username: 'Naty', amount: 10 });\nconst res = await authed('post', '/transfer')\n  .send({ from: 'Naty', to: 'Nathan', amount: 100 });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Saldo insuficiente');",
                  "err": {},
                  "uuid": "cccc14f4-316f-41dd-9819-f1d7671c4c58",
                  "parentUUID": "77e6e4b8-278c-4242-82fc-d9979d6c85bb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 500 quando ocorre erro na transferência",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 500 quando ocorre erro na transferência",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Simula erro no serviço\nsinon.stub(transferService, 'transferValue')\n  .throws(new Error('Erro simulado na transferência'));\nconst res = await authed('post', '/transfer')\n  .send({ from: 'Naty', to: 'Nathan', amount: 100 });\nexpect(res.status).to.equal(500);\nexpect(res.body).to.have.property('error', 'Erro simulado na transferência');",
                  "err": {},
                  "uuid": "dcf93832-db66-4401-bb78-5ecabdc86b7d",
                  "parentUUID": "77e6e4b8-278c-4242-82fc-d9979d6c85bb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 400 quando usuário remetente ou destinatário não existe",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 400 quando usuário remetente ou destinatário não existe",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await authed('post', '/transfer')\n  .send({ from: 'INEXISTENTE', to: 'QA', amount: 100 });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado');",
                  "err": {},
                  "uuid": "7fa10fc1-a47e-4dd4-9f8e-daf23aa680c0",
                  "parentUUID": "77e6e4b8-278c-4242-82fc-d9979d6c85bb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 400 usando mock quando remetente não existe",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 400 usando mock quando remetente não existe",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const err = new Error('Usuário remetente ou destinatário não encontrado');\nerr.status = 400;\nsinon.stub(transferService, 'transferValue').throws(err);\nconst res = await authed('post', '/transfer')\n  .send({ from: 'QA', to: 'JULIO', amount: 100 });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado');",
                  "err": {},
                  "uuid": "18a8b5cc-7fba-4b3a-9744-31abec624a12",
                  "parentUUID": "77e6e4b8-278c-4242-82fc-d9979d6c85bb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 201 usando mock quando a transferência é válida",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 201 usando mock quando a transferência é válida",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaEsperada = require('../fixture/Respostas/transferFixtureComSucesso.json').transferList[0];\n// Mocka transferência bem-sucedida\nconst mockData = {\n  from: 'Naty',\n  to: 'Nathan',\n  amount: 100,\n  date: new Date().toISOString()\n};\nsinon.stub(transferService, 'transferValue').returns(mockData);\nconst res = await authed('post', '/transfer')\n  .send({ from: 'Naty', to: 'Nathan', amount: 100 });\nexpect(res.status).to.equal(201);\n// Remove data para comparação exata\ndelete res.body.date;\nconst respostaSemData = { ...respostaEsperada };\ndelete respostaSemData.date;\nexpect(res.body).to.deep.equal(respostaSemData);\nexpect(res.status).to.equal(201);",
                  "err": {},
                  "uuid": "ad660c82-3bde-4b93-afd5-b68c72505a8a",
                  "parentUUID": "77e6e4b8-278c-4242-82fc-d9979d6c85bb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cccc14f4-316f-41dd-9819-f1d7671c4c58",
                "dcf93832-db66-4401-bb78-5ecabdc86b7d",
                "7fa10fc1-a47e-4dd4-9f8e-daf23aa680c0",
                "18a8b5cc-7fba-4b3a-9744-31abec624a12",
                "ad660c82-3bde-4b93-afd5-b68c72505a8a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 65,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f90704c5-96a7-4752-a128-144fc19a14cb",
              "title": "GET /transfer",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\transferController.test.js",
              "file": "\\test\\controller\\transferController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 200 e lista de transferências",
                  "fullTitle": "Transfer Controller GET /transfer Deve retornar 200 e lista de transferências",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await authed('get', '/transfer');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
                  "err": {},
                  "uuid": "335ff46a-be27-4b94-b12a-9a8506a8e10f",
                  "parentUUID": "f90704c5-96a7-4752-a128-144fc19a14cb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "335ff46a-be27-4b94-b12a-9a8506a8e10f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "68c6fee2-0b93-4f8e-87f6-bbd376f1111a",
              "title": "Transfer Controller -  exemplo mostrado em aula",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\transferController.test.js",
              "file": "\\test\\controller\\transferController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 400 quando saldo é insuficiente",
                  "fullTitle": "Transfer Controller Transfer Controller -  exemplo mostrado em aula Deve retornar 400 quando saldo é insuficiente",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request(app)\n  .post('/users/login')\n  .send({\n    username: 'Nathan',\n    password: '123456'\n  });\nconst token = respostaLogin.body.user.token;\nconst res = await request(app)\n  .post('/transfer')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ from: 'Nathan', to: 'Naty', amount: 100 });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Saldo insuficiente');",
                  "err": {},
                  "uuid": "be1cb2fd-6743-4f1f-b6af-e589ea9072a8",
                  "parentUUID": "68c6fee2-0b93-4f8e-87f6-bbd376f1111a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 200 e lista de transferências",
                  "fullTitle": "Transfer Controller Transfer Controller -  exemplo mostrado em aula Deve retornar 200 e lista de transferências",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .get('/transfer')\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
                  "err": {},
                  "uuid": "de4e8046-4089-4534-80c1-c8a48e434e32",
                  "parentUUID": "68c6fee2-0b93-4f8e-87f6-bbd376f1111a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be1cb2fd-6743-4f1f-b6af-e589ea9072a8",
                "de4e8046-4089-4534-80c1-c8a48e434e32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 43,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d0aca779-0cd2-405d-8b5f-16adee46747b",
          "title": "User Controller",
          "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\userController.test.js",
          "file": "\\test\\controller\\userController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5262c780-6fb1-44bf-ab27-dbf2755f1740",
              "title": "GET /users",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\userController.test.js",
              "file": "\\test\\controller\\userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando pesquiso usuários, recebo uma lista",
                  "fullTitle": "User Controller GET /users Quando pesquiso usuários, recebo uma lista",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n  .get('/users');\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.be.an('array');",
                  "err": {},
                  "uuid": "8870e29e-e184-4489-87dd-2cef38a165a7",
                  "parentUUID": "5262c780-6fb1-44bf-ab27-dbf2755f1740",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8870e29e-e184-4489-87dd-2cef38a165a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "55033914-4af7-4cac-bbec-80ce11fd017d",
              "title": "POST /users/login",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\userController.test.js",
              "file": "\\test\\controller\\userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "MOCK: Quando faço login com credenciais invalidas , recebo 401",
                  "fullTitle": "User Controller POST /users/login MOCK: Quando faço login com credenciais invalidas , recebo 401",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mockar apenas a função transfer do service\nconst userServiceMock = sinon.stub(userService, 'loginUser');\nuserServiceMock.throws(new Error('Credenciais inválidas'));\nconst resposta = await request(app)\n  .post('/users/login')\n  .send({\n    username: \"QA\",\n    password: \"12345\"\n  });\nexpect(resposta.status).to.equal(401);\nexpect(resposta.body).to.have.property('error', 'Credenciais inválidas');\nsinon.restore();",
                  "err": {},
                  "uuid": "382eea57-d270-427c-b6c7-1563d1d6cdd6",
                  "parentUUID": "55033914-4af7-4cac-bbec-80ce11fd017d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando faço login com credenciais invalidas , recebo 401",
                  "fullTitle": "User Controller POST /users/login Quando faço login com credenciais invalidas , recebo 401",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n  .post('/users/login')\n  .send({\n    username: \"QA\",\n    password: \"12345\"\n  });\nexpect(resposta.status).to.equal(401);\nexpect(resposta.body).to.have.property('error', 'Credenciais inválidas');",
                  "err": {},
                  "uuid": "b1d949f6-f983-47c8-97de-e5cb36f60bdc",
                  "parentUUID": "55033914-4af7-4cac-bbec-80ce11fd017d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando faço login com credenciais válidas , recebo 200 e token",
                  "fullTitle": "User Controller POST /users/login Quando faço login com credenciais válidas , recebo 200 e token",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n  .post('/users/login')\n  .send({\n    \"username\": \"Naty\",\n    \"password\": \"123456\"\n  });\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.have.property('user')\nexpect(resposta.body.user).to.have.property('token')\nexpect(resposta.body.user).to.have.property('saldo')\nexpect(resposta.body.user).to.have.property('favorecidos')",
                  "err": {},
                  "uuid": "a3c869e0-3f63-492f-9fd5-cb891d9ef502",
                  "parentUUID": "55033914-4af7-4cac-bbec-80ce11fd017d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve permitir registrar username já existente via REST",
                  "fullTitle": "User Controller POST /users/login Não deve permitir registrar username já existente via REST",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n .post('/users/register')\n .send({ username: 'Naty', password: '123456' });\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error');",
                  "err": {},
                  "uuid": "d077c1ff-737b-4e16-837e-9da4eb8946f3",
                  "parentUUID": "55033914-4af7-4cac-bbec-80ce11fd017d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "382eea57-d270-427c-b6c7-1563d1d6cdd6",
                "b1d949f6-f983-47c8-97de-e5cb36f60bdc",
                "a3c869e0-3f63-492f-9fd5-cb891d9ef502",
                "d077c1ff-737b-4e16-837e-9da4eb8946f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 46,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "0a7f912d-73aa-427c-8443-eeab2fa7c280",
              "title": "GET /users/balance",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\userController.test.js",
              "file": "\\test\\controller\\userController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"GET /users/balance\"",
                  "fullTitle": "User Controller GET /users/balance \"before each\" hook in \"GET /users/balance\"",
                  "timedOut": false,
                  "duration": 33,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request(app)\n  .post('/users/login')\n  .send({\n    \"username\": \"Naty\",\n    \"password\": \"123456\"\n  });\ntoken = respostaLogin.body.user.token;",
                  "err": {},
                  "uuid": "acb8e935-5b50-4252-a2fa-0bef151c42a3",
                  "parentUUID": "0a7f912d-73aa-427c-8443-eeab2fa7c280",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devo receber 200 e o valor do meu saldo",
                  "fullTitle": "User Controller GET /users/balance Devo receber 200 e o valor do meu saldo",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n        .get('/users/balance')\n        .set('Authorization', `Bearer ${token}`);\n      expect(res.status).to.equal(200);\n      expect(res.body).to.have.property('saldo');\n      expect(res.body.saldo).to.be.a('number');\n      expect(res.body.saldo).to.be.at.least(0);",
                  "err": {},
                  "uuid": "cf82b76e-c49c-44f4-a882-441cb7da0435",
                  "parentUUID": "0a7f912d-73aa-427c-8443-eeab2fa7c280",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devo receber 200 e o valor do saldo ao consultar meu saldo",
                  "fullTitle": "User Controller GET /users/balance Devo receber 200 e o valor do saldo ao consultar meu saldo",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .get('/users/balance')\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('username', 'Naty');\nexpect(res.body).to.have.property('saldo');\nexpect(res.body.saldo).to.be.a('number');\nexpect(res.body.saldo).to.be.at.least(0);",
                  "err": {},
                  "uuid": "d6100f18-ead1-4aee-a313-d3028c352d36",
                  "parentUUID": "0a7f912d-73aa-427c-8443-eeab2fa7c280",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devo receber 200 ao recarregar meu saldo",
                  "fullTitle": "User Controller GET /users/balance Devo receber 200 ao recarregar meu saldo",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/users/recharge')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    \"username\": \"Naty\",\n    \"amount\": 100\n  });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('username', 'Naty');\nexpect(res.body).to.have.property('saldo');",
                  "err": {},
                  "uuid": "dd59726b-11e3-4df3-9052-1758baa77e6a",
                  "parentUUID": "0a7f912d-73aa-427c-8443-eeab2fa7c280",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devo receber 200 ao recarregar meu saldo e o saldo deve ser alterado",
                  "fullTitle": "User Controller GET /users/balance Devo receber 200 ao recarregar meu saldo e o saldo deve ser alterado",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Consulta saldo inicial\nconst consultaInicial = await request(app)\n  .get('/users/balance')\n  .set('Authorization', `Bearer ${token}`);\nconst saldoInicial = consultaInicial.body.saldo;\nconsole.log(`Saldo inicial: ${saldoInicial}`);\n// Realiza recarga\nconst valorRecarga = 100;\nconst res = await request(app)\n  .post('/users/recharge')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    \"username\": \"Naty\",\n    \"amount\": valorRecarga\n  });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('saldo');\nexpect(res.body).to.have.property('username', 'Naty');\n// Consulta saldo após recarga\nconst respostaConsulta = await request(app)\n  .get('/users/balance')\n  .set('Authorization', `Bearer ${token}`);\nconsole.log(`Saldo após recarga: ${respostaConsulta.body.saldo}`);\nexpect(respostaConsulta.status).to.equal(200);\nexpect(respostaConsulta.body).to.have.property('saldo');\nexpect(respostaConsulta.body.saldo).to.equal(saldoInicial + valorRecarga);",
                  "err": {},
                  "uuid": "43cf9ddb-9477-4559-906a-0887b9b3b3c6",
                  "parentUUID": "0a7f912d-73aa-427c-8443-eeab2fa7c280",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf82b76e-c49c-44f4-a882-441cb7da0435",
                "d6100f18-ead1-4aee-a313-d3028c352d36",
                "dd59726b-11e3-4df3-9052-1758baa77e6a",
                "43cf9ddb-9477-4559-906a-0887b9b3b3c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 39,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}