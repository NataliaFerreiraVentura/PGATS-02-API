{
  "stats": {
    "suites": 10,
    "tests": 22,
    "passes": 22,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-19T02:06:26.939Z",
    "end": "2025-09-19T02:06:28.012Z",
    "duration": 1073,
    "testsRegistered": 22,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e65974f6-7880-44f9-8a0a-d3d8424e2de0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9bd975d6-443c-4821-9159-fec1b50b4e36",
          "title": "Transfer Controller",
          "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\transferController.test.js",
          "file": "\\test\\controller\\transferController.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Transfer Controller\"",
              "fullTitle": "Transfer Controller \"before each\" hook in \"Transfer Controller\"",
              "timedOut": false,
              "duration": 32,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Faz login e cria helper de requisição autenticada\ntoken = await loginAndGetToken('Naty', '123456');\nauthed = authRequest(token);",
              "err": {},
              "uuid": "2bd60c6e-c4ca-49e3-93f6-65c2deeacd78",
              "parentUUID": "9bd975d6-443c-4821-9159-fec1b50b4e36",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Transfer Controller\"",
              "fullTitle": "Transfer Controller \"after each\" hook in \"Transfer Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore()",
              "err": {},
              "uuid": "e79f30cb-954a-4a35-9bcb-9f851108f85a",
              "parentUUID": "9bd975d6-443c-4821-9159-fec1b50b4e36",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "1f142deb-8306-4b24-ae27-3803e65f476f",
              "title": "POST /transfer",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\transferController.test.js",
              "file": "\\test\\controller\\transferController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 400 quando saldo é insuficiente",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 400 quando saldo é insuficiente",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userModel = require('../../models/userModel');\nconst naty = userModel.users.find(u => u.username === 'Naty');\nif (naty) naty.saldo = 0; // mocka saldo insuficiente\n// Recarga mínima\nawait authed('post', '/users/recharge').send({ username: 'Naty', amount: 10 });\nconst res = await authed('post', '/transfer')\n  .send({ from: 'Naty', to: 'Nathan', amount: 100 });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Saldo insuficiente');",
                  "err": {},
                  "uuid": "838d2546-207a-43e4-8cb9-a643d835dfb1",
                  "parentUUID": "1f142deb-8306-4b24-ae27-3803e65f476f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 500 quando ocorre erro na transferência",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 500 quando ocorre erro na transferência",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Simula erro no serviço\nsinon.stub(transferService, 'transferValue')\n  .throws(new Error('Erro simulado na transferência'));\nconst res = await authed('post', '/transfer')\n  .send({ from: 'Naty', to: 'Nathan', amount: 100 });\nexpect(res.status).to.equal(500);\nexpect(res.body).to.have.property('error', 'Erro simulado na transferência');",
                  "err": {},
                  "uuid": "c7bf2490-3ea3-46ef-aca4-4baf31153bea",
                  "parentUUID": "1f142deb-8306-4b24-ae27-3803e65f476f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 400 quando usuário remetente ou destinatário não existe",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 400 quando usuário remetente ou destinatário não existe",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await authed('post', '/transfer')\n  .send({ from: 'INEXISTENTE', to: 'QA', amount: 100 });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado');",
                  "err": {},
                  "uuid": "67a2ac4d-3726-443d-9989-ad7969de035e",
                  "parentUUID": "1f142deb-8306-4b24-ae27-3803e65f476f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 400 usando mock quando remetente não existe",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 400 usando mock quando remetente não existe",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const err = new Error('Usuário remetente ou destinatário não encontrado');\nerr.status = 400;\nsinon.stub(transferService, 'transferValue').throws(err);\nconst res = await authed('post', '/transfer')\n  .send({ from: 'QA', to: 'JULIO', amount: 100 });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado');",
                  "err": {},
                  "uuid": "e939dfd1-38a3-4a59-a1b3-54aff1b10f79",
                  "parentUUID": "1f142deb-8306-4b24-ae27-3803e65f476f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 201 usando mock quando a transferência é válida",
                  "fullTitle": "Transfer Controller POST /transfer Deve retornar 201 usando mock quando a transferência é válida",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaEsperada = require('../fixture/Respostas/transferFixtureComSucesso.json').transferList[0];\n// Mocka transferência bem-sucedida\nconst mockData = {\n  from: 'Naty',\n  to: 'Nathan',\n  amount: 100,\n  date: new Date().toISOString()\n};\nsinon.stub(transferService, 'transferValue').returns(mockData);\nconst res = await authed('post', '/transfer')\n  .send({ from: 'Naty', to: 'Nathan', amount: 100 });\nexpect(res.status).to.equal(201);\n// Remove data para comparação exata\ndelete res.body.date;\nconst respostaSemData = { ...respostaEsperada };\ndelete respostaSemData.date;\nexpect(res.body).to.deep.equal(respostaSemData);\nexpect(res.status).to.equal(201);",
                  "err": {},
                  "uuid": "e08d7e21-9d0d-402d-a63f-c99b8f2fa874",
                  "parentUUID": "1f142deb-8306-4b24-ae27-3803e65f476f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "838d2546-207a-43e4-8cb9-a643d835dfb1",
                "c7bf2490-3ea3-46ef-aca4-4baf31153bea",
                "67a2ac4d-3726-443d-9989-ad7969de035e",
                "e939dfd1-38a3-4a59-a1b3-54aff1b10f79",
                "e08d7e21-9d0d-402d-a63f-c99b8f2fa874"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 68,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "dccbc286-32db-49e5-a8a4-cbaadba688e1",
              "title": "GET /transfer",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\transferController.test.js",
              "file": "\\test\\controller\\transferController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 200 e lista de transferências",
                  "fullTitle": "Transfer Controller GET /transfer Deve retornar 200 e lista de transferências",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await authed('get', '/transfer');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
                  "err": {},
                  "uuid": "e3acb186-7005-4ee4-9279-06616d0f4fc3",
                  "parentUUID": "dccbc286-32db-49e5-a8a4-cbaadba688e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e3acb186-7005-4ee4-9279-06616d0f4fc3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "28b9a6ff-74e1-4950-bd97-1962d31890c1",
              "title": "Transfer Controller -  exemplo mostrado em aula",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\transferController.test.js",
              "file": "\\test\\controller\\transferController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve retornar 400 quando saldo é insuficiente",
                  "fullTitle": "Transfer Controller Transfer Controller -  exemplo mostrado em aula Deve retornar 400 quando saldo é insuficiente",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request(app)\n  .post('/users/login')\n  .send({\n    username: 'Nathan',\n    password: '123456'\n  });\nconst token = respostaLogin.body.user.token;\nconst res = await request(app)\n  .post('/transfer')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ from: 'Nathan', to: 'Naty', amount: 100 });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Saldo insuficiente');",
                  "err": {},
                  "uuid": "d75ef1a2-08a5-4f02-bca1-3834d6fe665d",
                  "parentUUID": "28b9a6ff-74e1-4950-bd97-1962d31890c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve retornar 200 e lista de transferências",
                  "fullTitle": "Transfer Controller Transfer Controller -  exemplo mostrado em aula Deve retornar 200 e lista de transferências",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .get('/transfer')\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
                  "err": {},
                  "uuid": "2ce06ee1-1983-4a48-ae8d-7ab935c909ab",
                  "parentUUID": "28b9a6ff-74e1-4950-bd97-1962d31890c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d75ef1a2-08a5-4f02-bca1-3834d6fe665d",
                "2ce06ee1-1983-4a48-ae8d-7ab935c909ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 42,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "eeca497f-f135-4f98-a438-06f11c422d37",
          "title": "User Controller",
          "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\userController.test.js",
          "file": "\\test\\controller\\userController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "78a341fc-27ad-4c50-be0d-8d04397048dc",
              "title": "GET /users",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\userController.test.js",
              "file": "\\test\\controller\\userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando pesquiso usuários, recebo uma lista",
                  "fullTitle": "User Controller GET /users Quando pesquiso usuários, recebo uma lista",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n  .get('/users');\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.be.an('array');",
                  "err": {},
                  "uuid": "481da12d-0419-413a-92dc-467c6cef5e9b",
                  "parentUUID": "78a341fc-27ad-4c50-be0d-8d04397048dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "481da12d-0419-413a-92dc-467c6cef5e9b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "269a77c1-3a1e-4dab-bb3a-5198acccb7dc",
              "title": "POST /users/login",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\userController.test.js",
              "file": "\\test\\controller\\userController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "MOCK: Quando faço login com credenciais invalidas , recebo 401",
                  "fullTitle": "User Controller POST /users/login MOCK: Quando faço login com credenciais invalidas , recebo 401",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Mockar apenas a função transfer do service\nconst userServiceMock = sinon.stub(userService, 'loginUser');\nuserServiceMock.throws(new Error('Credenciais inválidas'));\nconst resposta = await request(app)\n  .post('/users/login')\n  .send({\n    username: \"QA\",\n    password: \"12345\"\n  });\nexpect(resposta.status).to.equal(401);\nexpect(resposta.body).to.have.property('error', 'Credenciais inválidas');\nsinon.restore();",
                  "err": {},
                  "uuid": "39e8e185-9666-4a23-b7ae-0c60d5391184",
                  "parentUUID": "269a77c1-3a1e-4dab-bb3a-5198acccb7dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando faço login com credenciais invalidas , recebo 401",
                  "fullTitle": "User Controller POST /users/login Quando faço login com credenciais invalidas , recebo 401",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n  .post('/users/login')\n  .send({\n    username: \"QA\",\n    password: \"12345\"\n  });\nexpect(resposta.status).to.equal(401);\nexpect(resposta.body).to.have.property('error', 'Credenciais inválidas');",
                  "err": {},
                  "uuid": "3b7de78f-1a0e-46f2-86f2-1509f025d1ee",
                  "parentUUID": "269a77c1-3a1e-4dab-bb3a-5198acccb7dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Quando faço login com credenciais válidas , recebo 200 e token",
                  "fullTitle": "User Controller POST /users/login Quando faço login com credenciais válidas , recebo 200 e token",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n  .post('/users/login')\n  .send({\n    \"username\": \"Naty\",\n    \"password\": \"123456\"\n  });\nexpect(resposta.status).to.equal(200);\nexpect(resposta.body).to.have.property('user')\nexpect(resposta.body.user).to.have.property('token')\nexpect(resposta.body.user).to.have.property('saldo')\nexpect(resposta.body.user).to.have.property('favorecidos')",
                  "err": {},
                  "uuid": "9931c64a-981e-4fd9-b072-b3b9a18a7f39",
                  "parentUUID": "269a77c1-3a1e-4dab-bb3a-5198acccb7dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39e8e185-9666-4a23-b7ae-0c60d5391184",
                "3b7de78f-1a0e-46f2-86f2-1509f025d1ee",
                "9931c64a-981e-4fd9-b072-b3b9a18a7f39"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 42,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "8f053094-0458-4d65-b9be-3be7a6796aa3",
              "title": "GET /users/balance",
              "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\controller\\userController.test.js",
              "file": "\\test\\controller\\userController.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"GET /users/balance\"",
                  "fullTitle": "User Controller GET /users/balance \"before each\" hook in \"GET /users/balance\"",
                  "timedOut": false,
                  "duration": 31,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const respostaLogin = await request(app)\n  .post('/users/login')\n  .send({\n    \"username\": \"Naty\",\n    \"password\": \"123456\"\n  });\ntoken = respostaLogin.body.user.token;",
                  "err": {},
                  "uuid": "286787c6-0f51-4eb1-959b-a2ef2ecc99e0",
                  "parentUUID": "8f053094-0458-4d65-b9be-3be7a6796aa3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Devo receber 200 e o valor do meu saldo",
                  "fullTitle": "User Controller GET /users/balance Devo receber 200 e o valor do meu saldo",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n        .get('/users/balance')\n        .set('Authorization', `Bearer ${token}`);\n      expect(res.status).to.equal(200);\n      expect(res.body).to.have.property('saldo');\n      expect(res.body.saldo).to.be.a('number');\n      expect(res.body.saldo).to.be.at.least(0);",
                  "err": {},
                  "uuid": "8d5e651c-55a7-45cb-8458-8cceddb1c5eb",
                  "parentUUID": "8f053094-0458-4d65-b9be-3be7a6796aa3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devo receber 200 e o valor do saldo ao consultar meu saldo",
                  "fullTitle": "User Controller GET /users/balance Devo receber 200 e o valor do saldo ao consultar meu saldo",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .get('/users/balance')\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('username', 'Naty');\nexpect(res.body).to.have.property('saldo');\nexpect(res.body.saldo).to.be.a('number');\nexpect(res.body.saldo).to.be.at.least(0);",
                  "err": {},
                  "uuid": "f52fa069-b744-4015-b096-f14556454ecb",
                  "parentUUID": "8f053094-0458-4d65-b9be-3be7a6796aa3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devo receber 200 ao recarregar meu saldo",
                  "fullTitle": "User Controller GET /users/balance Devo receber 200 ao recarregar meu saldo",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/users/recharge')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    \"username\": \"Naty\",\n    \"amount\": 100\n  });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('username', 'Naty');\nexpect(res.body).to.have.property('saldo');",
                  "err": {},
                  "uuid": "8803fc9d-7a49-477e-85b4-d2e950e9edf8",
                  "parentUUID": "8f053094-0458-4d65-b9be-3be7a6796aa3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Devo receber 200 ao recarregar meu saldo e o saldo deve ser alterado",
                  "fullTitle": "User Controller GET /users/balance Devo receber 200 ao recarregar meu saldo e o saldo deve ser alterado",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Consulta saldo inicial\nconst consultaInicial = await request(app)\n  .get('/users/balance')\n  .set('Authorization', `Bearer ${token}`);\nconst saldoInicial = consultaInicial.body.saldo;\nconsole.log(`Saldo inicial: ${saldoInicial}`);\n\n// Realiza recarga\nconst valorRecarga = 100;\nconst res = await request(app)\n  .post('/users/recharge')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    \"username\": \"Naty\",\n    \"amount\": valorRecarga\n  });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('saldo');\nexpect(res.body).to.have.property('username', 'Naty');\n// Consulta saldo após recarga\n     const respostaConsulta = await request(app)\n .get('/users/balance')\n .set('Authorization', `Bearer ${token}`);\nconsole.log(`Saldo após recarga: ${respostaConsulta.body.saldo}`);\nexpect(respostaConsulta.status).to.equal(200);\nexpect(respostaConsulta.body).to.have.property('saldo');\nexpect(respostaConsulta.body.saldo).to.equal(saldoInicial + valorRecarga);",
                  "err": {},
                  "uuid": "5baaa153-c11d-4706-8e05-5518f69d3219",
                  "parentUUID": "8f053094-0458-4d65-b9be-3be7a6796aa3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d5e651c-55a7-45cb-8458-8cceddb1c5eb",
                "f52fa069-b744-4015-b096-f14556454ecb",
                "8803fc9d-7a49-477e-85b4-d2e950e9edf8",
                "5baaa153-c11d-4706-8e05-5518f69d3219"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 36,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "5a60587f-f4d7-4214-8f23-346c9675b288",
          "title": "Transfer - external",
          "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\external\\transferExternal.test.js",
          "file": "\\test\\external\\transferExternal.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Transfer - external\"",
              "fullTitle": "Transfer - external \"before each\" hook in \"Transfer - external\"",
              "timedOut": false,
              "duration": 37,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "token = await loginAndGetTokenExternal('Naty', '123456');\nauthed = authRequestExternal(token);\n// Resetar saldo do remetente\nawait authed('post', '/users/recharge')\n    .send({ username: 'Naty', amount: 1000 });\n// Garantir que destinatário existe para testes positivos\nawait registerUserExternal('Nathan', '123456');\nexpect(token).to.be.a('string');\nexpect(token).to.not.be.empty;",
              "err": {},
              "uuid": "8b66f02e-fa01-4fa1-b071-de6b07810250",
              "parentUUID": "5a60587f-f4d7-4214-8f23-346c9675b288",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Transfer - external\"",
              "fullTitle": "Transfer - external \"after each\" hook in \"Transfer - external\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Aqui você pode implementar lógica para remover usuários criados, se necessário\n// await deleteUserExternal('Nathan');",
              "err": {},
              "uuid": "7b229510-eb62-4d59-a038-ce037155affc",
              "parentUUID": "5a60587f-f4d7-4214-8f23-346c9675b288",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Deve retornar 400 se destinatário não estiver cadastrado",
              "fullTitle": "Transfer - external Deve retornar 400 se destinatário não estiver cadastrado",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Melhoria: valida mensagem de erro e status\n// Não cadastra o destinatário 'QAS'\nconst userData = {\n    from: 'Naty',\n    to: 'QAS',\n    amount: 100\n};\nconst res = await authed('post', '/transfer').send(userData);\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado');\n// Melhoria: checar tipo da resposta\nexpect(res.body.error).to.be.a('string');",
              "err": {},
              "uuid": "acbf5505-3a44-433f-9261-a35e4e5c530a",
              "parentUUID": "5a60587f-f4d7-4214-8f23-346c9675b288",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar 201 quando a transferência é válida",
              "fullTitle": "Transfer - external Deve retornar 201 quando a transferência é válida",
              "timedOut": false,
              "duration": 118,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Melhoria: consulta saldo antes e depois\n// Consulta saldo inicial do remetente e destinatário\nconst saldoRemetenteAntes = (await authed('get', '/users/balance')).body.saldo;\nconst saldoDestinatarioAntes = (await request('http://localhost:3000')\n    .post('/users/login')\n    .send({ username: 'Nathan', password: '123456' })\n    .then(res => res.body.user.token)\n    .then(tokenNathan => request('http://localhost:3000')\n        .get('/users/balance')\n        .set('Authorization', `Bearer ${tokenNathan}`)\n    )).body.saldo;\nconst userData = {\n    from: 'Naty',\n    to: 'Nathan',\n    amount: 100\n};\nconst res = await authed('post', '/transfer').send(userData);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('from', 'Naty');\nexpect(res.body).to.have.property('to', 'Nathan');\nexpect(res.body).to.have.property('amount', 100);\nexpect(res.body).to.have.property('date');\n// Melhoria: checar tipos\nexpect(res.body.amount).to.be.a('number');\nexpect(res.body.date).to.be.a('string');\n// Consulta saldo após transferência\nconst saldoRemetenteDepois = (await authed('get', '/users/balance')).body.saldo;\nconst saldoDestinatarioDepois = (await request('http://localhost:3000')\n    .post('/users/login')\n    .send({ username: 'Nathan', password: '123456' })\n    .then(res => res.body.user.token)\n    .then(tokenNathan => request('http://localhost:3000')\n        .get('/users/balance')\n        .set('Authorization', `Bearer ${tokenNathan}`)\n    )).body.saldo;\n// Melhoria: valida saldo atualizado\nexpect(saldoRemetenteDepois).to.equal(saldoRemetenteAntes - userData.amount);\nexpect(saldoDestinatarioDepois).to.equal(saldoDestinatarioAntes + userData.amount);",
              "err": {},
              "uuid": "d3e7c208-7c3b-4378-9fee-9377cbb5bbcb",
              "parentUUID": "5a60587f-f4d7-4214-8f23-346c9675b288",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar 200 ao consultar transferências",
              "fullTitle": "Transfer - external Deve retornar 200 ao consultar transferências",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Melhoria: checar estrutura dos itens do array\nconst res = await authed('get', '/transfer');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nif (res.body.length > 0) {\n    const item = res.body[0];\n    expect(item).to.have.property('from');\n    expect(item).to.have.property('to');\n    expect(item).to.have.property('amount');\n    expect(item).to.have.property('date');\n}",
              "err": {},
              "uuid": "4188c5aa-038c-4aed-807a-1c184030dbb3",
              "parentUUID": "5a60587f-f4d7-4214-8f23-346c9675b288",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar 400 ao tentar transferir valor zero",
              "fullTitle": "Transfer - external Deve retornar 400 ao tentar transferir valor zero",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userData = {\n    from: 'Naty',\n    to: 'Nathan',\n    amount: 0\n};\nconst res = await authed('post', '/transfer').send(userData);\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "19ede08b-de8f-4f01-a6f5-793f1287184a",
              "parentUUID": "5a60587f-f4d7-4214-8f23-346c9675b288",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve retornar 400 ao tentar transferir valor negativo",
              "fullTitle": "Transfer - external Deve retornar 400 ao tentar transferir valor negativo",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userData = {\n    from: 'Naty',\n    to: 'Nathan',\n    amount: -50\n};\nconst res = await authed('post', '/transfer').send(userData);\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "dd791e93-c09e-4166-b4de-54f6c0943330",
              "parentUUID": "5a60587f-f4d7-4214-8f23-346c9675b288",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "acbf5505-3a44-433f-9261-a35e4e5c530a",
            "d3e7c208-7c3b-4378-9fee-9377cbb5bbcb",
            "4188c5aa-038c-4aed-807a-1c184030dbb3",
            "19ede08b-de8f-4f01-a6f5-793f1287184a",
            "dd791e93-c09e-4166-b4de-54f6c0943330"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 140,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "5d63194d-3c90-4dcd-b273-8a98f88db509",
          "title": "Transfer - external - outro exemplo mostrado em aula",
          "fullFile": "C:\\Users\\natyv\\Documents\\ESTUDOS_AUTOMACAO_QA\\POS-GRADUAÇÃO\\PGATS-API\\test\\external\\transferExternal.test.js",
          "file": "\\test\\external\\transferExternal.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Transfer - external - outro exemplo mostrado em aula\"",
              "fullTitle": "Transfer - external - outro exemplo mostrado em aula \"before all\" hook in \"Transfer - external - outro exemplo mostrado em aula\"",
              "timedOut": false,
              "duration": 28,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const respostaLogin = await request('http://localhost:3000')\n    .post('/users/login')\n    .send({ username: 'Naty', password: '123456' });\nthis.token = respostaLogin.body.user.token;",
              "err": {},
              "uuid": "6ab2b08f-14e2-4b46-a626-51255003f12b",
              "parentUUID": "5d63194d-3c90-4dcd-b273-8a98f88db509",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve retornar 201 quando a transferência é válida",
              "fullTitle": "Transfer - external - outro exemplo mostrado em aula Deve retornar 201 quando a transferência é válida",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Melhoria: garantir que destinatário existe\nawait request('http://localhost:3000')\n    .post('/users/register')\n    .send({ username: 'sophia', password: '123456' });\nconst userData = {\n    from: 'Naty',\n    to: 'sophia',\n    amount: 1\n};\nconst resposta = await request('http://localhost:3000')\n    .post('/transfer')\n    .set('Authorization', `Bearer ${this.token}`)\n    .send(userData);\nexpect(resposta.status).to.equal(201);\nexpect(resposta.body).to.have.property('from', 'Naty');\nexpect(resposta.body).to.have.property('to', 'sophia');\nexpect(resposta.body).to.have.property('date');\n// Melhoria: checar tipos\nexpect(resposta.body.amount).to.be.a('number');\nexpect(resposta.body.date).to.be.a('string');",
              "err": {},
              "uuid": "ae174ba9-ac8c-4228-b2d2-2427126b8656",
              "parentUUID": "5d63194d-3c90-4dcd-b273-8a98f88db509",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ae174ba9-ac8c-4228-b2d2-2427126b8656"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}